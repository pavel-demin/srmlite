--- starfish/starfishCmd.c	2012-03-15 21:37:48.000000000 +0100
+++ starfish-patched/starfishCmd.c	2017-01-18 17:58:20.759189428 +0100
@@ -53,27 +53,12 @@
 
 #include "starfishInt.h"
 
-#if defined(sun) && defined (__SVR4)
-#include <rpc/rpcent.h>
-#else
-#include <rpc/rpc.h>
-#endif
-
-#if defined(__OpenBSD__)
-#include <rpcsvc/ypclnt.h>
-#endif
-
-#include <rpcsvc/yp_prot.h>
-
 #include <sys/ioctl.h>
 #include <netinet/in.h>
 #include <net/if.h>
 
 #define KEEPALIVE	1
 
-#define YP_SUCC		0
-#define YP_FAIL		1
-
 #define SYS_ERROR	-1
 
 #define BUFLEN		256
@@ -94,14 +79,6 @@ static int Starfish_NetdbNetworks
   _ANSI_ARGS_((Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
    char *cmd, char *subcmd));
 
-static int Starfish_NetdbProtocols
-  _ANSI_ARGS_((Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
-  char *cmd, char *subcmd));
-
-static int Starfish_NetdbServices
-  _ANSI_ARGS_((Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
-  char *cmd, char *subcmd));
-
 static int Starfish_NetdbNetgroups
   _ANSI_ARGS_((Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
   char *cmd, char *subcmd));
@@ -115,33 +92,6 @@ static int Starfish_NetdbMap
   char *cmd, char *subcmd));
 
 /************************************************************************/
-/* Support functions.							*/
-/************************************************************************/
-
-static int Callback(int status, char *key, int keylen, char *val, int vallen,
-  char *data)
-  {
-    Tcl_Interp *interp = (Tcl_Interp *) data;
-
-    switch (status)
-      {
-        case YP_TRUE:
-	  key[keylen] = 0;
-	  val[vallen] = 0;
-	  Tcl_AppendResult(interp, "{", key, " ", val, "}", (char *) NULL);
-	  return YP_SUCC;
-	  break;
-        case YP_NOMORE:
-	  break;
-        default:
-	  Tcl_AppendResult(interp, "cannot lookup NIS map", (char *) NULL);
-	  break;
-      }
-
-    return YP_FAIL;
-  }
-
-/************************************************************************/
 /* Subcommand functions.						*/
 /************************************************************************/
 
@@ -368,226 +318,6 @@ Starfish_NetdbNetworks(Tcl_Interp *inter
 /*
  *----------------------------------------------------------------------
  *
- * Starfish_NetdbProtocols --
- *
- *	This procedure is invoked to process the "netdb protocols" command.
- *	See the user documentation for details on what it does.
- *
- * Results:
- *	A standard Tcl result.
- *
- * Side effects:
- *	See the user documentation.
- *
- *----------------------------------------------------------------------
- */
-
-static int
-Starfish_NetdbProtocols(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
-  char *cmd, char *subcmd)
-{
-    char *variant, *key;
-
-    /*
-     * Process the "netdb protocols" command option:
-     */
-
-    if (objc == 2) {
-#ifdef HAVE_GETPROTOENT
-	struct protoent *proto;
-	char buf[20];
-	int i = 0;
-	
-	setprotoent(KEEPALIVE);
-	while ((proto = getprotoent())) {	
-	    sprintf(buf, "%d", proto->p_proto);
-	    Tcl_AppendResult(interp, i++ ? " {" : "{", proto->p_name, 
-			     " ", buf, "}", (char *) NULL);
-	}
-	endprotoent();
-#endif
-	return TCL_OK;
-    }
-
-    variant = Tcl_GetString(objv[2]);
-
-    /*
-     * Process the "netdb protocols name" command option:
-     */
-
-    if (strcmp(variant, "name") == 0) {
-	struct protoent *proto;
-	int num;
-	if (objc != 4) {
-	    Tcl_AppendResult(interp, "wrong # args: should be \"",
-	      cmd, " ", subcmd, " name number\"", (char *) NULL);
-	    return TCL_ERROR;
-	}
-	key = Tcl_GetString(objv[3]);
-	if (Tcl_GetInt(interp, key, &num) != TCL_OK) {
-	    return TCL_ERROR;
-	}
-	if ((proto = getprotobynumber(num)) == NULL) {
-	    Tcl_AppendResult(interp, "cannot lookup \"", key, "\"",
-			     (char *) NULL);
-	    return TCL_ERROR;
-	}
-	Tcl_SetResult(interp, proto->p_name, TCL_VOLATILE);
-	return TCL_OK;
-    }
-
-    /*
-     * Process the "netdb protocols number" command option:
-     */
-
-    if (strcmp(variant, "number") == 0) {
-	struct protoent *proto;
-	if (objc != 4) {
-	    Tcl_AppendResult(interp, "wrong # args: should be \"",
-	      cmd, " ", subcmd, " number name\"", (char *) NULL);
-	    return TCL_ERROR;
-	}
-	key = Tcl_GetString(objv[3]);
-	if ((proto = getprotobyname(key)) == NULL) {
-	    Tcl_AppendResult(interp, "cannot lookup \"", key, "\"",
-			     (char *) NULL);
-	    return TCL_ERROR;
-	}
-	sprintf(interp->result, "%d", proto->p_proto);
-	return TCL_OK;
-    }
-
-    Tcl_AppendResult(interp, "bad query \"", variant, 
-      "\": should be name or number", (char *) NULL);
-    return TCL_ERROR;
-}
-
-/*
- *----------------------------------------------------------------------
- *
- * Starfish_NetdbServices --
- *
- *	This procedure is invoked to process the "netdb services" command.
- *	See the user documentation for details on what it does.
- *
- * Results:
- *	A standard Tcl result.
- *
- * Side effects:
- *	See the user documentation.
- *
- *----------------------------------------------------------------------
- */
-
-static int
-Starfish_NetdbServices(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
-  char *cmd, char *subcmd)
-{
-    char *variant, *key, *arg;
-
-    /*
-     * Process the "netdb services" command option:
-     */
-
-    if (objc == 2) {
-#ifdef HAVE_GETSERVENT
-	struct servent *serv;
-	char buf[BUFLEN];
-	int i = 0;
-	
-	setservent(KEEPALIVE);
-	while ((serv = getservent())) {	
-	    sprintf(buf, "%d", ntohs(serv->s_port));
-	    Tcl_AppendResult(interp, i++ ? " {" : "{",
-	      serv->s_name, " ", buf, " ", serv->s_proto,
-	      "}", (char *) NULL);
-	}
-	endservent();
-#endif
-	return TCL_OK;
-    }
-
-    variant = Tcl_GetString(objv[2]);
-
-    /*
-     * Process the "netdb services name" command option:
-     */
-
-    if (strcmp(variant, "name") == 0) {
-	struct sockaddr_in addr;
-	int port;
-	char *name;
-
-	switch (objc)
-	  {
-	    case 4:
-	      arg = NULL;
-	      break;
-	    case 5:
-	      arg = Tcl_GetString(objv[4]);
-	      break;
-	    default:
-	      {
-		Tcl_AppendResult(interp, "wrong # args: should be \"",
-		  cmd, " ", subcmd, " name number ?protocol?\"",
-		  (char *) NULL);
-		return TCL_ERROR;
-	      }
-	  }
-
-	key = Tcl_GetString(objv[3]);
-	if (Starfish_GetUnsigned(interp, key, &port) != TCL_OK) {
-	    return TCL_ERROR;
-	}
-	addr.sin_port = htons(port);
-	name = Starfish_GetIPPort(interp, arg, &addr);
-	if (! name) {
-	    return TCL_ERROR;
-	}
-	Tcl_SetResult(interp, name, TCL_VOLATILE);
-	return TCL_OK;
-    }
-
-    /*
-     * Process the "netdb services number" command option:
-     */
-
-    if (strcmp(variant, "number") == 0) {
-	struct sockaddr_in addr;
-
-	switch (objc)
-	  {
-	    case 4:
-	      arg = NULL;
-	      break;
-	    case 5:
-	      arg = Tcl_GetString(objv[4]);
-	      break;
-	    default:
-	      {
-		Tcl_AppendResult(interp, "wrong # args: should be \"",
-		  cmd, " ", subcmd, " number name ?protocol?\"",
-		  (char *) NULL);
-		return TCL_ERROR;
-	      }
-	  }
-
-	key = Tcl_GetString(objv[3]);
-	if (Starfish_SetIPPort(interp, arg, key, &addr) != TCL_OK) {
-	    return TCL_ERROR;
-	}
-	sprintf(interp->result, "%d", ntohs(addr.sin_port));
-	return TCL_OK;
-    }
-
-    Tcl_AppendResult(interp, "bad query \"",
-     variant, "\": should be name or number", (char *) NULL);
-    return TCL_ERROR;
-}
-
-/*
- *----------------------------------------------------------------------
- *
  * Starfish_NetdbNetgroups --
  *
  *      This procedure is invoked to process the "netdb netgroups" command.
@@ -860,91 +590,6 @@ Starfish_NetdbIp(Tcl_Interp *interp, int
     return TCL_ERROR;
 }
 
-/*
- *----------------------------------------------------------------------
- *
- * Starfish_NetdbMap --
- *
- *      This procedure is invoked to process the default case of the
- *      "netdb" command.
- *	See the user documentation for details on what it does.
- *
- * Results:
- *      A standard Tcl result.
- *
- * Side effects:
- *      See the user documentation.
- *
- *----------------------------------------------------------------------
- */
-
-static int
-Starfish_NetdbMap(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
-  char *cmd, char *subcmd)
-{
-    struct ypall_callback obj;
-    char *self, *domain, *map, *key, *val;
-    int result, keylen, vallen;
-
-    /*
-     * Process the default "netdb" command option:
-     */
-
-    result = yp_get_default_domain(&domain);
-
-    if (result != YP_SUCC) {
-	Tcl_AppendResult(interp, "NIS domain not set", (char *) NULL);
-	return TCL_ERROR;
-    }
-
-    switch (objc)
-      {
-        case 2:
-	  map		= Tcl_GetString(objv[1]);
-
-	  obj.foreach	= Callback;
-	  obj.data	= (char *) interp;
-
-	  result = yp_all(domain, map, &obj);
-
-	  if (result != YP_SUCC)
-	    {
-	      Tcl_AppendResult(interp, 
-			       "cannot lookup NIS map \"", map, "\"",
-			       (char *) NULL);
-	      return TCL_ERROR;
-	    }
-
-	  return TCL_OK;
-	  break;
-
-        case 3:
-	  map		= Tcl_GetString(objv[1]);
-	  key		= Tcl_GetString(objv[2]);
-
-	  result = yp_match(domain, map, key, strlen(key), &val, &vallen);
-
-	  if (result != YP_SUCC)
-	    {
-	      Tcl_AppendResult(interp,
-			       "cannot match NIS map \"", map, "\"",
-			       (char *) NULL);
-	      return TCL_ERROR;
-	    }
-
-	  val[vallen] = 0;
-	  Tcl_AppendResult(interp, val, (char *) NULL);
-	  return TCL_OK;
-	  break;
-
-        default:
-	  Tcl_AppendResult(interp, "wrong # args: should be \"",
-	    cmd, " map ?key?\"", (char *) NULL);
-	  return TCL_ERROR;
-	  break;
-      }
-}
-
 /************************************************************************/
 /* Entry points.							*/
 /************************************************************************/
@@ -986,16 +631,14 @@ Starfish_NetdbCmd(ClientData clientData,
 	result = Starfish_NetdbHosts(interp, objc, objv, cmd, subcmd);
     } else if (strcmp(subcmd, "networks")	== 0) {
 	result = Starfish_NetdbNetworks(interp, objc, objv, cmd, subcmd);
-    } else if (strcmp(subcmd, "protocols")	== 0) {
-	result = Starfish_NetdbProtocols(interp, objc, objv, cmd, subcmd);
-    } else if (strcmp(subcmd, "services")	== 0) {
-	result = Starfish_NetdbServices(interp, objc, objv, cmd, subcmd);
     } else if (strcmp(subcmd, "netgroups")	== 0) {
 	result = Starfish_NetdbNetgroups(interp, objc, objv, cmd, subcmd);
     } else if (strcmp(subcmd, "ip")		== 0) {
 	result = Starfish_NetdbIp(interp, objc, objv, cmd, subcmd);
     } else {
-	result = Starfish_NetdbMap(interp, objc, objv, cmd, subcmd);
+    	  Tcl_AppendResult(interp, "wrong # args: should be \"",
+	        cmd, " map ?key?\"", (char *) NULL);
+        result = TCL_ERROR;
     }
 
 #ifdef TCL_THREADS
diff -pruN starfish/starfishInit.c starfish-patched/starfishInit.c
--- starfish/starfishInit.c	2003-03-11 01:48:05.000000000 +0100
+++ starfish-patched/starfishInit.c	2007-10-19 01:55:36.880301248 +0200
@@ -86,14 +86,10 @@ Starfish_Init(Tcl_Interp *interp)
     }
 #endif
 
-#ifdef STARFISH_FORCE_PACKAGE
-    /* Ordinarily we are loaded as part of an enclosing package definition.
-    */
     result = Tcl_PkgProvide(interp, STARFISH_PACKAGE, STARFISH_VERSION);
     if (result != TCL_OK) {
         return result;
     }
-#endif
 
     Starfish_Limit();
     Starfish_InitSafeCmds(interp);
@@ -115,14 +111,10 @@ Starfish_SafeInit(Tcl_Interp *interp)
   {
     int result;
 
-#ifdef STARFISH_FORCE_PACKAGE
-    /* Ordinarily we are loaded as part of an enclosing package definition.
-    */
     result = Tcl_PkgProvide(interp, STARFISH_PACKAGE, STARFISH_VERSION);
     if (result != TCL_OK) {
         return result;
     }
-#endif
 
     Starfish_Limit();
     Starfish_InitSafeCmds(interp);
